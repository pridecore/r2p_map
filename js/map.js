// üó∫Ô∏è –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–∞—Ä—Ç–∏ OpenStreetMap —á–µ—Ä–µ–∑ Leaflet.js
var map = L.map('map', {
    center: [48.4647, 35.0462], // –î–Ω—ñ–ø—Ä–æ
    zoom: 8.5, // –ü–æ—á–∞—Ç–∫–æ–≤–∏–π –º–∞—Å—à—Ç–∞–±
    zoomControl: true, // –£–≤—ñ–º–∫–Ω–µ–Ω–æ –∑—É–º-–∫–æ–Ω—Ç—Ä–æ–ª
    preferCanvas: true // –û–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
});

// üé® –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω—É –º–∞–ø—É (—Ç–µ–º–Ω–∞ —Ç–µ–º–∞)
var darkLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OSM</a> &copy; <a href="https://carto.com/">Carto</a>',
    subdomains: 'abcd',
    maxZoom: 20
}).addTo(map);

// üó∫ –î–æ–¥–∞—î–º–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ñ —Å—Ç–∏–ª—ñ –º–∞–ø–∏
var lightLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; OpenStreetMap contributors'
});

var satelliteLayer = L.tileLayer('https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; OpenTopoMap contributors'
});

// üìå –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Å—Ç–∏–ª—ñ–≤ –º–∞–ø–∏
L.control.layers({
    "–¢–µ–º–Ω–∞ –º–∞–ø–∞": darkLayer,
    "–°–≤—ñ—Ç–ª–∞ –º–∞–ø–∞": lightLayer,
    "–°—É–ø—É—Ç–Ω–∏–∫–æ–≤–∞ –º–∞–ø–∞": satelliteLayer
}).addTo(map);

// üéØ –û–±'—î–∫—Ç –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –º–∞—Ä–∫–µ—Ä—ñ–≤
var markers = {};

// üìå –ü–æ—á–∞—Ç–∫–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–∞—Ä—Ç–∏
const initialView = {
    center: [48.4647, 35.0462],
    zoom: 8.5
};

// üìå –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∑ Google Apps Script
async function loadPoints() {
    try {
        const scriptUrl = "https://script.google.com/macros/s/AKfycbzu4bjR3CFugsIqd7Qg6-36X9Ftqfz-EsES1g57szyVRZ5AaEFkQdkdPC9XrZa5Xda5Uw/exec"; // üîó URL Google Apps Script
        const response = await fetch(scriptUrl);
        if (!response.ok) throw new Error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö");

        const data = await response.json();
        console.log("‚úÖ –û—Ç—Ä–∏–º–∞–Ω—ñ –¥–∞–Ω—ñ:", data);

        // üöÄ –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É —Ç–æ—á–æ–∫ –¥–ª—è –ø–æ—à—É–∫—É
        updateSearchData(data);

        data.forEach(point => {
            let lat = parseFloat(point.lat);
            let lng = parseFloat(point.lng);
            let name = point.name || "–ù–µ–≤—ñ–¥–æ–º–∞ –ª–æ–∫–∞—Ü—ñ—è"; // –ù–∞–∑–≤–∞ —Ç–æ—á–∫–∏
            let bedsTotal = parseInt(point.bedsTotal, 10) || 0; // –ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—ñ–∂–æ–∫
            let bedsFree = parseInt(point.bedsFree, 10) || 0; // –í—ñ–ª—å–Ω—ñ –ª—ñ–∂–∫–∞
            let indicator = point.indicator || "‚ö™"; // –Ü–Ω–¥–∏–∫–∞—Ç–æ—Ä üü¢ –∞–±–æ üî¥

            // üõë –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ—Ä–µ–∫—Ç–Ω–æ—Å—Ç—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            if (isNaN(lat) || isNaN(lng)) {
                console.warn(`‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Ç–æ—á–∫—É: ${name} (–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: ${point.lat}, ${point.lng})`);
                return;
            }

            // üé® –í–∏–±—ñ—Ä —ñ–∫–æ–Ω–∫–∏ –º–∞—Ä–∫–µ—Ä–∞
            let iconUrl = indicator === "üü¢" ? "/img/home_green.png" : "/img/home_red.png";
            let markerIcon = L.icon({
                iconUrl: iconUrl,
                iconSize: [14, 14], // üìè –†–æ–∑–º—ñ—Ä —ñ–∫–æ–Ω–∫–∏
                iconAnchor: [20, 40], // üìå –¢–æ—á–∫–∞ –∫—Ä—ñ–ø–ª–µ–Ω–Ω—è (–ø–æ —Ü–µ–Ω—Ç—Ä—É)
                popupAnchor: [-13, -45] // üéà –ü–æ–∑–∏—Ü—ñ—è popup
            });

            let popupContent = `
                <div style="
                    font-family: 'Open Sans', sans-serif;
                    padding: 0;
                    border-radius: 12px;
                    background: #ffffff;
                    box-shadow: 0px 6px 15px rgba(0, 0, 0, 0.3);
                    text-align: center;
                    width: 100%;
                    max-width: 320px; /* –û–±–º–µ–∂—É—î–º–æ —à–∏—Ä–∏–Ω—É */
                    position: relative;
                    overflow: hidden;
                    border: 3px solid #606162;
                    box-sizing: border-box;
                    font-size: 90%; /* üîπ –ó–º–µ–Ω—à–µ–Ω–æ —à—Ä–∏—Ñ—Ç –Ω–∞ 10% */">

                    <!-- üîπ –í–µ—Ä—Ö–Ω—è –ø–∞–Ω–µ–ª—å -->
                    <div style="
                        background: linear-gradient(135deg, #2f64a6 0%, #e2346f 100%);
                        padding: 12px;
                        color: #fff;
                        font-weight: bold;
                        font-size: 110%; /* üîπ –í—ñ–¥–Ω–æ—Å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä */
                        border-radius: 8px 8px 0 0;
                        text-transform: uppercase;
                        letter-spacing: 1px;
                        width: 100%;
                        box-sizing: border-box;">
                        üìç ${name}
                    </div>

                    <!-- üìä –û—Å–Ω–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç -->
                    <div style="
                        padding: 12px;
                        color: #606162;
                        font-size: 100%; /* üîπ –í—ñ–¥–Ω–æ—Å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä */
                        text-align: left;
                        width: 100%;
                        box-sizing: border-box;">

                        <p style="margin: 8px 0;">
                            üõè <span style="font-weight: bold;">–í—Å—å–æ–≥–æ –ª—ñ–∂–æ–∫:</span> 
                            <b style="color: #2f64a6; font-size: 110%;">${bedsTotal}</b>
                        </p>

                        ${(() => {
                            if (bedsFree >= bedsTotal) {
                                return `<p style="
                                    font-size: 100%;
                                    font-weight: bold;
                                    padding: 8px;
                                    border-radius: 5px;
                                    background: rgba(226, 52, 111, 0.85);
                                    color: #fff;
                                    text-align: center;
                                    width: 100%;
                                    box-sizing: border-box;">
                                    ‚ùå –ù–µ –º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å!
                                </p>`;
                            }
                            if (bedsFree > 0) {
                                return `<p style="
                                    font-size: 100%;
                                    font-weight: bold;
                                    padding: 8px;
                                    border-radius: 5px;
                                    background: rgba(47, 100, 166, 0.2);
                                    color: #2f64a6;
                                    text-align: center;
                                    width: 100%;
                                    box-sizing: border-box;">
                                    üü¢ –í—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å: <b>${bedsFree}</b>
                                </p>`;
                            }
                            return `<p style="
                                font-size: 100%;
                                font-weight: bold;
                                padding: 8px;
                                border-radius: 5px;
                                background: rgba(226, 52, 111, 0.2);
                                color: #e2346f;
                                text-align: center;
                                width: 100%;
                                box-sizing: border-box;">
                                üî¥ –í—ñ–ª—å–Ω–∏—Ö –º—ñ—Å—Ü—å –Ω–µ–º–∞—î!
                            </p>`;
                        })()}
                    </div>

                    <!-- ‚ö° –ü—ñ–¥—Å–≤—ñ—Ç–∫–∞ –ø—ñ–¥ popup -->
                    <div style="
                        position: absolute;
                        bottom: 0;
                        left: 0;
                        width: 100%;
                        height: 4px;
                        background: linear-gradient(to right, #2f64a6, #e2346f);
                        animation: gradient-slide 10s linear infinite;
                        box-sizing: border-box;"></div>
                </div>

                <!-- –ê–Ω—ñ–º–∞—Ü—ñ—è -->
                <style>
                    @import url('https://fonts.googleapis.com/css2?family=Open+Sans:wght@400;600;700&display=swap');

                    @keyframes gradient-slide {
                        0% { transform: translateX(-100%); }
                        100% { transform: translateX(100%); }
                    }
                </style>
            `;


            // –Ø–∫—â–æ –º–∞—Ä–∫–µ—Ä –≤–∂–µ —î - –æ–Ω–æ–≤–ª—é—î–º–æ –π–æ–≥–æ, —ñ–Ω–∞–∫—à–µ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π
            if (markers[point.id]) {
                markers[point.id].setLatLng([lat, lng]);
                markers[point.id].setIcon(markerIcon);
                markers[point.id].bindPopup(popupContent);
            } else {
                let marker = L.marker([lat, lng], { icon: markerIcon }).addTo(map)
                    .bindPopup(popupContent);

                // üîç –î–æ–¥–∞—î–º–æ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–±—ñ–ª—å—à—É–≤–∞—Ç–∏ –∫–∞—Ä—Ç—É –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –º–∞—Ä–∫–µ—Ä
                marker.on("click", function () {
                    map.flyTo([lat, lng], 16, {
                        animate: true,
                        duration: 0.75 // –ß–∞—Å –∞–Ω—ñ–º–∞—Ü—ñ—ó
                    });
                });

                markers[point.id] = marker;
            }
        });

    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ—á–æ–∫:", error);
    }
}


// üöÄ –ó–∞–ø—É—Å–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ—á–æ–∫
loadPoints();

// üîÑ –û–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ–∂–Ω—ñ 30 —Å–µ–∫—É–Ω–¥
setInterval(loadPoints, 30000);

// üîÑ –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –º–∞—Å—à—Ç–∞–±—É –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –ø–æ–∑–∞ –º–∞—Ä–∫–µ—Ä–∞–º–∏
map.on("click", function (e) {
    // –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ –Ω–µ –Ω–∞ –º–∞—Ä–∫–µ—Ä
    if (!e.originalEvent.target.closest(".leaflet-marker-icon")) {
        map.flyTo(initialView.center, initialView.zoom, {
            animate: true,
            duration: 1 // –ß–∞—Å –∞–Ω—ñ–º–∞—Ü—ñ—ó
        });
    }
});

// üìå –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ URL
function getQueryParam(param) {
    let urlParams = new URLSearchParams(window.location.search);
    return urlParams.get(param);
}

// üìå –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –∑ URL
let paramLat = parseFloat(getQueryParam("lat"));
let paramLng = parseFloat(getQueryParam("lng"));

// üìå –Ø–∫—â–æ —î –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏, –ø–µ—Ä–µ–Ω–æ—Å–∏–º–æ –∫–∞—Ä—Ç—É —ñ –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –ø–æ–ø–∞–ø
if (!isNaN(paramLat) && !isNaN(paramLng)) {
    setTimeout(() => {
        map.flyTo([paramLat, paramLng], 15, { animate: true, duration: 1 });

        // üîç –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –º–∞—è—á–æ–∫ —ñ –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –π–æ–≥–æ popup
        Object.values(markers).forEach(marker => {
            let markerPos = marker.getLatLng();
            if (markerPos.lat.toFixed(5) === paramLat.toFixed(5) && markerPos.lng.toFixed(5) === paramLng.toFixed(5)) {
                marker.openPopup();
            }
        });

    }, 1000);
}